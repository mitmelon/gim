import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  session: defineTable({
    stoken: v.any(),
    authToken: v.string(),
    fingerprint: v.string(),
    browser: v.string(),
    os: v.string(),
    ip: v.string(),
    device: v.string(),
    expire: v.number(),
    dateUpdated: v.number(),
  }).index("by_token", ["authToken"]),
  verifications: defineTable({
    vtoken: v.any(),
    authToken: v.string(),
    code: v.string(),
    expire: v.number(),
    dateUpdated: v.number(),
  }).index("by_token", ["authToken"]),
  auth_user: defineTable({
    authToken: v.string(),
    name: v.string(),
    email: v.string(),
    country: v.string(),
    fingerprint: v.any(),
    password: v.string(),
    salt: v.string(),
    status: v.string(),
    dateAdded: v.number(),
    dateUpdated: v.number(),
  }),
  agreement: defineTable({
    authToken: v.string(),
    agree: v.string(),
    dateUpdated: v.number(),
  }),
  todo_task: defineTable({
    authToken: v.string(),
    personal: v.optional(v.string()),
    facial: v.optional(v.string()),
    idcard: v.optional(v.string()),
    signature: v.optional(v.string()),
    dateUpdated: v.number(),
  }),
  identity_data: defineTable({
    authToken: v.string(),
    name: v.string(),
    phone: v.string(),
    dob: v.string(),
    gender: v.string(),
    residential_address: v.string(),
    residential_city: v.string(),
    residential_state: v.string(),
    residential_country: v.string(),
    origin_state: v.string(),
    origin_country: v.string(),
    primary_language: v.string(),
    about: v.string(),
    race: v.string(),
    revision: v.number(),
    dateUpdated: v.number(),
  }),
  identity_file: defineTable({
    authToken: v.string(),
    storageId: v.id("_storage"),
    dateUpdated: v.number(),
  }).index("by_auth", ["authToken"]),
  user_image: defineTable({
    authToken: v.string(),
    storageId: v.id("_storage"),
    dateUpdated: v.number(),
  }),
  signature: defineTable({
    authToken: v.string(),
    storageId: v.id("_storage"),
    dateUpdated: v.number(),
  }),
  verify_data: defineTable({
    authToken: v.string(),
    id: v.string(),
    status: v.string(),
    descriptions: v.string(),
    dataMatch: v.union(v.string(), v.number()),
    timeSpent: v.union(v.string(), v.number()),
    dateCreated: v.number(),
    dateUpdated: v.number(),
  }),
});