//Radar Object
var radar = new ManomiteRadar;
var storage = radar._Storage();
var Timer = radar._Watch();
var quenee = [];
var timee = 0;
var ajax_requester;

var gToast = {
  error: function (content) {
    Swal.fire({
      title: "Error",
      text: content,
      icon: "error"
    });
  },
  success: function (content, header = 'Success', footer = '') {
    Swal.fire({
      title: "success",
      text: content,
      icon: "success"
    });
  }
};

let url = new URL(window.location.href);
//Animate Css
const animateCSS = (element, animation, prefix = 'animate__') =>
  new Promise((resolve, reject) => {
    const animationName = `${prefix}${animation}`;
    const node = document.querySelector(element);

    node.classList.add(`${prefix}animated`, animationName);

    function handleAnimationEnd(event) {
      event.stopPropagation();
      node.classList.remove(`${prefix}animated`, animationName);
      resolve('Animation ended');

    }
    node.addEventListener('animationend', handleAnimationEnd, { once: true });
  });
//Default loader

const theme_loader = '<div class="text-center" id="loadex"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"><span></div>';

const centerLoader = '<span id="maloaders" style="display:block;margin-left:auto;margin-right:auto;" class="spinner-border spinner-border text-primary" role="status" aria-hidden="true"></span>';
const default_loader =
  '<svg id="maloaders" width="70" height="20" viewBox="0 0 135 140" xmlns="http://www.w3.org/2000/svg" fill="#fff">'
  + '<rect y="10" width="15" height="120" rx="6">'
  + '<animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" />'
  + '<animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" />'
  + '</rect>'
  + '<rect x="30" y="10" width="15" height="120" rx="6">'
  + '<animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" />'
  + '<animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" />'
  + '</rect>'
  + '<rect x="60" width="15" height="140" rx="6">'
  + '<animate attributeName="height" begin="0s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" />'
  + '<animate attributeName="y" begin="0s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" />'
  + '</rect>'
  + '<rect x="90" y="10" width="15" height="120" rx="6">'
  + '<animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" />'
  + '<animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" />'
  + '</rect>'
  + '<rect x="120" y="10" width="15" height="120" rx="6">'
  + '<animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" />'
  + '<animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" />'
  + '</rect>'
  + '</svg>';
//General Class - Main Configurations for watermelon usage
class General {
  constructor() {
    new Geolocation().getLocation();
    document.onreadystatechange = function () {
      
      if (document.readyState !== "complete") {
        NProgress.start();
        document.querySelector(
          "body").style = "pointer-events: none; opacity:.2;";
      } else {
        document.querySelector(
          "body").style = "";
        NProgress.done();
      }
      if (window.speechSynthesis.getVoices().length == 0) {
        window.speechSynthesis.addEventListener("voiceschanged", function () {
          speechSynthesis.onvoiceschanged = "Microsoft Zira Desktop - English (United States)";
        });
      }
    };
  }

  is_token_stored(token) {
    var stored = storage.get(token);
    if (stored !== undefined && stored !== '' && stored !== 'null' && stored !== null) {
      return true;
    }
    return false;
  }
  getBase() {
    var script;
    if (document.currentScript) {
      script = document.currentScript.src;
    } else {
      var scripts = document.getElementsByTagName('script');
      script = scripts[scripts.length - 1].src;
    }
    var x = script.split('/');
    var urlBase = '';
    for (const path of x) {
      if (typeof path != 'undefined') {
        if (path == 'asset') {
          break;
        } else {
          urlBase += path + '/';
        }
      }
    }
    return urlBase;
  }
  currentPage() {
    return window.location.href;
  }
  redirect(url) {
    window.location = url;
  }
  reload() {
    document.location.reload()
  }
  getCurrentUrl() {
    let url = new URL(window.location.href);
    return url.href;
  }
  ajaxFormData(formID, type, url, data, btid = null, buttonName = null, successCallback = null, loader = 'default', eventMan = null) {
    ajax_requester = $.ajax({
      type: type,
      timeout: this.timeout, // 2 mins
      url: url,
      data: data,
      contentType: false,
      cache: false,
      processData: false,
      beforeSend: function () {
        if (formID !== null && buttonName !== null && btid !== null) {
          NProgress.start();
        }
        if (btid !== null && btid !== '' && typeof btid !== 'undefined') {
          $(btid).removeClass("btn-dim");
          $(btid).attr('disabled', true);
          $(btid).attr('style', 'opacity: 0.5');
          document.querySelector(btid).style.pointerEvents = "none";
          switch (loader) {
            case 'centerLoader':
              $(btid).html(centerLoader);
              break;
            case 'themeLoader':
              $(btid).html(theme_loader);
              break;
            default:
              $(btid).html(default_loader);
          }
        }
      },
      success: function (response) {
        if (response.status === 200) {
          if (buttonName !== null) {
            $(btid).html(buttonName);
          } else {
            $('#maloaders').remove();
          }
          if (btid !== null && btid !== '' && typeof btid !== 'undefined') {
            $(btid).attr("disabled", false);
            $(btid).css("opacity", 2.5);
            document.querySelector(btid).style = "";
          }
          if (typeof successCallback === 'function') {
            successCallback(response, buttonName);
          }
          if (formID !== null && buttonName !== null && btid !== null) {
            NProgress.done();
          }
        } else {
          if (btid !== null && btid !== '' && typeof btid !== 'undefined') {
            $(btid).attr("disabled", false);
            $(btid).css("opacity", 2.5);
            document.querySelector(btid).style = "";
          }
          if (buttonName !== null && buttonName !== '' && typeof buttonName !== 'undefined') {
            $(btid).html(buttonName);
          } else {
            $('#maloaders').remove();
          }
          gToast.error(response.error);
          if (formID !== null) {
            animateCSS(formID, 'shake');
          }
          if (formID !== null && buttonName !== null && btid !== null) {
            NProgress.done();
          }
        }
      },
      error: function (xmlhttprequest, textstatus, message) {
        if (textstatus === "timeout") {
          if (btid !== null) {
            $(btid).attr("disabled", false);
            $(btid).css("opacity", 2.5);
            document.querySelector(btid).style = "";
          }
          if (buttonName !== null && buttonName !== '' && typeof buttonName !== 'undefined') {
            $(btid).html(buttonName);
          } else {
            $('#maloaders').remove();
          }
          gToast.error('Request timeout error.');
          if (formID !== null) {
            animateCSS(formID, 'shake');
          }
          if (formID !== null && buttonName !== null && btid !== null) {
            NProgress.done();
          }
        } else {
          if (btid !== null && btid !== '' && typeof btid !== 'undefined') {
            $(btid).attr("disabled", false);
            $(btid).css("opacity", 2.5);
            document.querySelector(btid).style = "";
          }
          if (buttonName !== null && buttonName !== '' && typeof buttonName !== 'undefined') {
            $(btid).html(buttonName);
          } else {
            $('#maloaders').remove();
          }
          gToast.error(message);
          if (formID !== null) {
            animateCSS(formID, 'shake');
          }
          if (formID !== null && buttonName !== null && btid !== null) {
            NProgress.done();
          }
        }
      }
    });
    return false;
  }
  greetUser() {
    var greeting;
    var time = new Date().getHours();
    if (time < 10) {
      greeting = general.morning;
    } else if (time < 20) {
      greeting = general.day;
    } else {
      greeting = general.evening;
    }
    if ($("#app-greetings").length) {
      $("#app-greetings").append(greeting);
    }
  }
  cache(data) {
    return data;
  }
  arrayStringToInt(data) {
    return data.map(i => Number(i));
  }
  getCurrency(key) {
    let currency = {
      'NGN': 'â‚¦',
      'USD': '$',
    }
    return currency[key];
  }
  delay(callback, ms) {
    var timer = 0;
    return function (...args) {
      clearTimeout(timer)
      args = arguments;
      timer = setTimeout(callback.bind(this, ...args), ms || 0)
    }
  }
  sleep(milliseconds) {
    const date = Date.now();
    let currentDate = null;
    do {
      currentDate = Date.now();
    } while (currentDate - date < milliseconds);
  }
  countIntArray(value) {
    if (Number.isInteger(value)) {
      var arrayOfDigits = Array.from(String(value), Number);
      var count = 0;
      for (var i = 0; i < arrayOfDigits.length; ++i) {
        count++;
      }
      return count;
    } else {
      return false;
    }
  }
  speak(text, onendCallBack = null) {
    if (typeof window.speechSynthesis === 'undefined' && !window.speechSynthesis) {
      //Webview not supported yet
      //Run API instead
      this.ajaxFormData(null, 'POST', this.getBase + 'src/Nerves/voice', { request: 'compute', text: text }, null, null, function (data) {
        quenee.push(data.sound);
        inPlayer(quenee);
        function inPlayer(quene) {
          if (quene.length > 0) {
            //check if audio is playing currently
            if (timee === 0) {
              //audio is not playing, play it
              const audio = new Audio(quenee[0]);
              audio.play();
              var clearr = setInterval(function () {
                timee = audio.currentTime;
                if (audio.duration === audio.currentTime) {
                  audio.currentTime = 0;
                  clearInterval(clearr);
                  timee = 0;
                }
              }, 100);
              audio.addEventListener('ended', function () {
                quene.shift();
                (new General).ajaxFormData(null, 'POST', this.getBase + 'src/Nerves/voice', { request: 'trash', text: data.sound }, null, null, null, null);
                timee = 0;
                inPlayer(quene);
              })
            }
          }
        }
      })
    } else {
      let english_voice = window.speechSynthesis.getVoices().filter(function (voice) {
        return voice.name == 'Microsoft Zira Desktop - English (United States)';
      })[0];
      var utter = new SpeechSynthesisUtterance();
      utter.rate = 1;
      utter.pitch = 0.5;
      utter.text = this.filter(text);
      utter.voice = english_voice;
      utter.onend = function () {
        if (typeof onendCallBack === 'function' && onendCallBack !== null) {
          onendCallBack();
        }
      };
      window.speechSynthesis.speak(utter);
      text = null;
    }
  }
  filter(str) {
    if ((str === null) || (str === ''))
      return '';
    else {
      var doc = new DOMParser().parseFromString(str, 'text/html');
      return doc.body.textContent || "";
    }
  }
  readFile(input, selector) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();

      reader.onload = function (e) {
        $(selector).attr('src', e.target.result);
      }
      reader.readAsDataURL(input.files[0]);
    }
  }
  download_file(fileURL, fileName) {
    // for non-IE
    if (!window.ActiveXObject) {
      var save = document.createElement('a');
      save.href = fileURL;
      save.target = '_blank';
      var filename = fileURL.substring(fileURL.lastIndexOf('/') + 1);
      save.download = fileName || filename;
      if (navigator.userAgent.toLowerCase().match(/(ipad|iphone|safari)/) && navigator.userAgent.search("Chrome") < 0) {
        document.location = save.href;
        // window event not working here
      } else {
        var evt = new MouseEvent('click', {
          'view': window,
          'bubbles': true,
          'cancelable': false
        });
        save.dispatchEvent(evt);
        (window.URL || window.webkitURL).revokeObjectURL(save.href);
        gToast.success('Downloaded successfully.');
      }
    }
    // for IE < 11
    else if (!!window.ActiveXObject && document.execCommand) {
      var _window = window.open(fileURL, '_blank');
      _window.document.close();
      _window.document.execCommand('SaveAs', true, fileName || fileURL)
      gToast.success('Downloaded successfully.');
      _window.close();
    }
  }
  generateNumber(otpLength = 6) {
    let baseNumber = Math.pow(10, otpLength - 1);
    let number = Math.floor(Math.random() * baseNumber);
    /*
    Check if number have 0 as first digit
    */
    if (number < baseNumber) {
      number += baseNumber;
    }
    return number;
  }
  getExt(fname) {
    var pos = fname.lastIndexOf(".");
    var strlen = fname.length;
    if (pos != -1 && strlen != pos + 1) {
      var ext = fname.split(".");
      var len = ext.length;
      var extension = ext[len - 1].toLowerCase();
    } else {
      extension = "No extension found";
    }
    return extension;
  }
  player(sound, callback = null) {
    var audio = new Audio(sound);
    if (typeof callback === 'function') {
      callback(audio);
    }
    audio.play();
    audio.volume = 1;
  }
  getParentUrl() {
    var isInIframe = (parent !== window), parentUrl = null;
    if (isInIframe) {
      parentUrl = document.referrer;
    }
    if (parentUrl === '' || parentUrl === null) {
      return storage.get('clara_currents');
    }
    return parentUrl;
  }
  pdfView(binary) {
    var pdfDoc = null,
      pageNum = 1,
      pageRendering = false,
      pageNumPending = null,
      scale = 1.2,
      canvas = document.getElementById('the-canvas'),
      ctx = canvas.getContext('2d');

    function renderPage(num) {
      pageRendering = true;
      pdfDoc.getPage(num).then(function (page) {
        var viewport = page.getViewport({ scale: scale });
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        var renderContext = {
          canvasContext: ctx,
          viewport: viewport
        };
        var renderTask = page.render(renderContext);
        renderTask.promise.then(function () {
          pageRendering = false;
          if (pageNumPending !== null) {
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });
      document.getElementById('page_num').textContent = num;
    }
    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }
    function onPrevPage() {
      if (pageNum <= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    }
    document.getElementById('prev').addEventListener('click', onPrevPage);
    function onNextPage() {
      if (pageNum >= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      queueRenderPage(pageNum);
    }
    document.getElementById('next').addEventListener('click', onNextPage);


    var zoominbutton = document.getElementById("zoominbutton");
    zoominbutton.onclick = function () {
      scale = scale + 0.5;
      queueRenderPage(pageNum);
    }

    var zoomoutbutton = document.getElementById("zoomoutbutton");
    zoomoutbutton.onclick = function () {
      if (scale <= 1.0) {
        return;
      }
      scale = scale - 1.0;
      queueRenderPage(pageNum);
    }
    var pdfData = atob(binary);
    pdfjsLib.getDocument({ data: pdfData }).promise.then(function (pdfDoc_) {
      pdfDoc = pdfDoc_;
      document.getElementById('page_count').textContent = pdfDoc.numPages;

      // Initial/first page rendering
      renderPage(pageNum);
    });
  }
  loadScript(url, callback) {
    var script = document.createElement("script");
    script.type = "text/javascript";

    if (script.readyState) {  //IE
      script.onreadystatechange = function () {
        if (script.readyState == "loaded" ||
          script.readyState == "complete") {
          script.onreadystatechange = null;
          callback();
        }
      };
    } else {  //Others
      script.onload = function () {
        callback();
      };
    }
    script.src = url;
    document.getElementsByTagName("head")[0].appendChild(script);
  }
  filePond(url, selector, options = {}, callback = null, formData = {}, progressLabel) {
    console.log('pond is supported')
    if (FilePond.supported()) {
      console.log('pond is supported')
      FilePond.registerPlugin(
        FilePondPluginImagePreview,
        FilePondPluginImageExifOrientation,
        FilePondPluginFileValidateSize
      );
      const inputElements = document.querySelectorAll(selector);
      Array.from(inputElements).forEach(inputElement => {
        const pond = FilePond.create(inputElement, options);
        //Options Include
        /**
        {
          labelIdle: 'Drag & Drop your picture or <span class="filepond--label-action">Browse</span>',
          imagePreviewHeight: 170,
          imageCropAspectRatio: '1:1',
          imageResizeTargetWidth: 200,
          imageResizeTargetHeight: 200,
          stylePanelLayout: 'compact circle',
          styleLoadIndicatorPosition: 'center bottom',
          styleProgressIndicatorPosition: 'right bottom',
          styleButtonRemoveItemPosition: 'left bottom',
          styleButtonProcessItemPosition: 'right bottom',
        } 
        */
        if(progressLabel !== undefined){
          $(progressLabel).html('Once you select your file, please wait while the upload completes. This message will change once the upload is finally completed.');
        }
        pond.setOptions({
          server: {
            timeout: 120000,
            process: {
              url: url,
              method: 'POST',
              withCredentials: true,
              headers: formData,
              onload: (response) => {
                if(typeof response.response !== 'undefined'){
                  var json = response.response.replace(/^[^{[]+/, "");
                } else {
                  var json = response.replace(/^[^{[]+/, "");
                }
                var response = JSON.parse(json);
                if (response.status === 200) {
                  if (typeof callback === 'function') {
                    callback(response);
                  }
                } else {
                  if(progressLabel !== undefined){
                    $(progressLabel).html(response.error)
                  }
                  pond.removeFile();
                  gToast.error(response.error);
                }
              },
              onerror: (response) => {
                if(progressLabel !== undefined){
                  $(progressLabel).html(response.error)
                }
                gToast.error(response);
              }
            }
          }
        });
        $('.filepond--credits').remove();
      })
    } else {
      console.error('No pond engine is configured.');
    }
  }
}
class NextPrev {
  constructor(className, prevId, nextId, currentTab) {
    this.className = className;
    this.prevName = prevId;
    this.nextName = nextId;
    this.currentTab = currentTab;
    this.trigger = false;

  }
  showTab() {
    var pageEle = document.getElementsByClassName(this.className);
    pageEle[this.currentTab].style.display = "block";
    if (this.currentTab == 0) {
      document.getElementById(this.prevName).style.display = "none";
    }
    else {
      document.getElementById(this.prevName).style.display = "inline";
    }
    if (this.currentTab == (pageEle.length - 1)) {
      document.getElementById(this.prevName).innerHTML = "Prev";
    }
    else {
      document.getElementById(this.nextName).innerHTML = "Next";
    }
    this.changeStepIndicator(this.currentTab)
  }
  changeStepIndicator(currentTab) {
    const highlightedItems = document.querySelectorAll(".step");
    highlightedItems.forEach((userItem) => {
      userItem.children[0].className = userItem.children[0].className.replace("step-header rounded-full bg-primary text-white dark:bg-accent", "step-header rounded-full bg-slate-200 text-slate-800 dark:bg-navy-500 dark:text-white");
    });
    var pageEle = document.querySelectorAll(".step");
    pageEle[currentTab].children[0].className = "step-header rounded-full bg-primary text-white dark:bg-accent";
  }
  nextPrev(stepNo, callback) {
    var pageEle = document.getElementsByClassName(this.className);
    var remcurrentTab = stepNo + this.currentTab;
    let progress = pageEle.length - remcurrentTab;
    var btn = document.getElementById(this.nextName);

    if ((progress === 1 || progress === 0) && stepNo === 1) {
      btn.innerHTML = "Submit";
      btn.setAttribute('type', 'submit');
      this.trigger = true;
    } else {
      btn.innerHTML = "Next";
      btn.removeAttribute('type');
      this.trigger = false;
    }
    if (this.trigger && remcurrentTab >= pageEle.length) {
      if (typeof callback === 'function') {
        callback();
      }
      return;
    }
    pageEle[this.currentTab].style.display = "none";
    this.currentTab = remcurrentTab;
    this.showTab();
  }
}
loadjs = function () { var h = function () { }, c = {}, u = {}, f = {}; function o(e, n) { if (e) { var r = f[e]; if (u[e] = n, r) for (; r.length;)r[0](e, n), r.splice(0, 1) } } function l(e, n) { e.call && (e = { success: e }), n.length ? (e.error || h)(n) : (e.success || h)(e) } function d(r, t, s, i) { var c, o, e = document, n = s.async, u = (s.numRetries || 0) + 1, f = s.before || h, l = r.replace(/[\?|#].*$/, ""), a = r.replace(/^(css|img)!/, ""); i = i || 0, /(^css!|\.css$)/.test(l) ? ((o = e.createElement("link")).rel = "stylesheet", o.href = a, (c = "hideFocus" in o) && o.relList && (c = 0, o.rel = "preload", o.as = "style")) : /(^img!|\.(png|gif|jpg|svg|webp)$)/.test(l) ? (o = e.createElement("img")).src = a : ((o = e.createElement("script")).src = r, o.async = void 0 === n || n), !(o.onload = o.onerror = o.onbeforeload = function (e) { var n = e.type[0]; if (c) try { o.sheet.cssText.length || (n = "e") } catch (e) { 18 != e.code && (n = "e") } if ("e" == n) { if ((i += 1) < u) return d(r, t, s, i) } else if ("preload" == o.rel && "style" == o.as) return o.rel = "stylesheet"; t(r, n, e.defaultPrevented) }) !== f(r, o) && e.head.appendChild(o) } function r(e, n, r) { var t, s; if (n && n.trim && (t = n), s = (t ? r : n) || {}, t) { if (t in c) throw "LoadJS"; c[t] = !0 } function i(n, r) { !function (e, t, n) { var r, s, i = (e = e.push ? e : [e]).length, c = i, o = []; for (r = function (e, n, r) { if ("e" == n && o.push(e), "b" == n) { if (!r) return; o.push(e) } --i || t(o) }, s = 0; s < c; s++)d(e[s], r, n) }(e, function (e) { l(s, e), n && l({ success: n, error: r }, e), o(t, e) }, s) } if (s.returnPromise) return new Promise(i); i() } return r.ready = function (e, n) { return function (e, r) { e = e.push ? e : [e]; var n, t, s, i = [], c = e.length, o = c; for (n = function (e, n) { n.length && i.push(e), --o || r(i) }; c--;)t = e[c], (s = u[t]) ? n(t, s) : (f[t] = f[t] || []).push(n) }(e, function (e) { l(n, e) }), r }, r.done = function (e) { o(e, []) }, r.reset = function () { c = {}, u = {}, f = {} }, r.isDefined = function (e) { return e in c }, r }();