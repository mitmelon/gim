///////////////////////////////////////////////////////////////KERNEL VERSION 1.0.0////////////////////////////////////////////////////
const general = new General;
const BASE = general.getBase();

const gim = {
  appName: 'gim',
  processor: BASE + 'src/Processor/Manager/_0826837_processor.php',
  fileProcessor: BASE + 'src/Processor/Manager/_0826837_file.php',
};

function isNumber(x, noStr) {
  return (
    (typeof x === 'number' || x instanceof Number || (!noStr && x && typeof x === 'string' && !isNaN(x))) &&
    isFinite(x)
  ) || false;
};

function isEmpty(value) {
  return (
    (value == null) ||
    (value.hasOwnProperty('length') && value.length === 0) ||
    (value.constructor === Object && Object.keys(value).length === 0)
  )
}

const signatureInstance = {
  init: function (callback = null) {
    const canvas = document.getElementById("signature");
    const clearButton = document.getElementById("sigClearButton");
    const saveButton = document.getElementById("sigSaveButton");
    const signaturePad = new SignaturePad(canvas);
    signaturePad.penColor = "rgb(0, 0, 0)";
    clearButton.addEventListener("click", function (event) {
      signaturePad.clear();
    });
    saveButton.addEventListener("click", function (event) {
      if (signaturePad.isEmpty()) {
        gToast.error('Sorry! signature image cannot be found.');
      } else {
        const dataURL = signaturePad.toDataURL();
        if (typeof callback === 'function') {
          callback(dataURL, '#sigSaveButton', signaturePad);
        };
      }
    });
  }
};
const sigInstance = Object.create(signatureInstance);

const cameraToDo = {
  'isHuman': 'Please focus your face close to the camera',
  'smile': 'Please laugh loudly to capture your emotion',
  'faceLeft': 'Please turn your head to left direction',
  'faceRight': 'Please turn your head to right direction',
  'eyeBlink': 'Please blink your eyes multiple times',
  'gender': 'Please focus your face on the screen properly to detect your gender',
  'age': 'Please focus your face on the screen properly to detect your age accurately',
  'mouthOpened': 'Please open your mouth widely',
  'mouthClosed': 'Please close your mouth gently',
}

const cameraDoneData = {
  'isHuman': '',
  'smile': '',
  'faceLeft': '',
  'faceRight': '',
  'eyeBlink': '',
  'gender': '',
  'age': '',
  'mouthOpened': '',
  'mouthClosed': ''
};

if ($('.gimApp').length) {
  const handler = $('.gimApp').html();
  const formData = new FormData();
  formData.append('request', 'loadApp');

  formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
  general.ajaxFormData('.gimApp', 'POST', gim.processor, formData, '.gimApp', handler, function (data) {
    $('.gimApp').html(data.page);
  });
}


$(document).on("click", ".agreeButton", function (e) {
  const formData = new FormData();
  formData.append('request', 'agree');
  const handler = $('.agreeButton').html();
  formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
  general.ajaxFormData('.agreeButton', 'POST', gim.processor, formData, '.agreeButton', handler, function (data) {
    general.reload();
  }, 'themeLoader')
});
$(document).on("click", ".reviewIdentity", function (e) {
  const formData = new FormData();
  formData.append('request', 'reviewIdentity');
  const handler = $('.reviewIdentity').html();
  formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
  general.ajaxFormData('.reviewIdentity', 'POST', gim.processor, formData, '.reviewIdentity', handler, function (data) {
    $('#modal_screen').html(data.modal);
    //Get time spent on page during verification
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    setInterval(function () {
      const timeSpentOnPage = radar._Watch().getTimeOnCurrentPageInSeconds();
      timeSpent = timeSpentOnPage.toFixed(2);
      const timeStorage = radar._Storage().get('gimTimeSpent_' + data.id);
      if (isNumber(timeStorage)) {
        radar._Storage().set('gimTimeSpent_' + data.id, timeStorage + timeSpent);
      } else {
        radar._Storage().set('gimTimeSpent_' + data.id, timeSpent);
      }
    }, 25);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    if ($('.personalIdentity').length) {
      loadjs([BASE + "asset/theme/libs/litepicker/dist/litepicker.js", BASE + "asset/plugin/tel/js/intlTelInput.min.js", BASE + "asset/plugin/tel/js/utils.js", BASE + "asset/plugin/tel/css/intlTelInput.min.css"], {
        async: true,
        success: function () {
          const input = document.querySelector("#phone");
          intl = window.intlTelInput(input, {
            preferredCountries: ["ng"],
            separateDialCode: true,
            initialCountry: "",
            utilsScript: BASE + "asset/plugin/tel/js/utils.js"
          });
          window.Litepicker && (new Litepicker({
            element: document.getElementById('datepicker-default'),
            buttonText: {
              previousMonth: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 6l-6 6l6 6" /></svg>`,
              nextMonth: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l6 6l-6 6" /></svg>`,
            },
          }));
        }
      })

      if ($('.getCountryList').length) {
        const formData = new FormData();
        const section = $('.getCountryList').html();
        formData.append('request', 'getCountryList');
        formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
        general.ajaxFormData('.getCountryList', 'POST', BASE + 'src/Addons/general.php', formData, '.getCountryList', section, function (data) {
          if (typeof data.country !== 'undefined') {
            const getCountryLists = document.querySelectorAll('.getCountryList');
            Array.from(getCountryLists).forEach(getCountryList => {
              for (const key in data.country) {
                getCountryList.add(new Option(data.country[key]['id'], data.country[key]['title']));
              }
            });
          }
        });
      }




    }
    const myModal = new bootstrap.Modal(document.getElementById(data.modalID), {
      backdrop: 'static',
      keyboard: false
    })
    myModal.show();
  }, 'themeLoader')
});

$(document).on("click", ".downloadIdentity", function (e) {
  const formData = new FormData();
  formData.append('request', 'downloadIdentity');
  const handler = $('.downloadIdentity').html();
  formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
  general.ajaxFormData('.downloadIdentity', 'POST', gim.processor, formData, '.downloadIdentity', handler, function (data) {
    gToast.success(data.message);
  }, 'themeLoader')
});

$(document).on("submit", ".personalIdentity", function (e) {
  e.preventDefault();
  var formData = new FormData(this);
  formData.append('request', 'personalIdentity');
  const handler = $('#subPerm').html();
  formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
  general.ajaxFormData('.personalIdentity', 'POST', gim.processor, formData, '#subPerm', handler, function (data) {
    $('.identityPage').html(data.inline);
    if ($('#video-container').length) {
      //vars load the video renderer
      const video = document.getElementById("camera");
      const videoContainer = document.getElementById("video-container");
      const MODEL_URI = 'asset/plugin/face/model';
      var predictedAges = [];
      var previousEyeOpenness = 0;
      var previousMidPointX = 0;
      var cameraCapture;
      var capturedImage;
      var cancelCapture;
      var submitting_progress = false;
      var soundCompleted = false;
      var submitted_image = false;
      $('#loadHandler').html(theme_loader);
      Promise.all([
        faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URI),
        faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URI),
        faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URI),
        faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URI),
        faceapi.nets.ageGenderNet.loadFromUri(MODEL_URI),
      ])
        .then(playVideo)
        .catch((err) => {
          gToast.error(err);
        });

      function playVideo() {
        if (!navigator.mediaDevices) {
          gToast.error("mediaDevices not supported for your device");
          return;
        }
        navigator.mediaDevices
          .getUserMedia({
            video: {
              width: { min: 300, ideal: 300, max: 300 },
              height: { min: 320, ideal: 320, max: 320 },
            },
            audio: false,
          })
          .then(function (stream) {
            video.srcObject = stream;
          })
          .catch(function (err) {
            $('#loadHandler').remove();
            gToast.error(err);
          });
      }
      video.addEventListener("play", () => {
        $('#loadHandler').remove();
        const canvas = faceapi.createCanvasFromMedia(video);
        // This will force the use of a software (instead of hardware accelerated)
        // Enable only for low configurations
        canvas.willReadFrequently = true;
        videoContainer.appendChild(canvas);
        // Resizing the canvas to cover the video element
        const canvasSize = { width: video.width, height: video.height };
        faceapi.matchDimensions(canvas, canvasSize);
        cameraCapture = setInterval(async () => {
          const detections = await faceapi
            .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
            .withFaceLandmarks()
            .withFaceExpressions()
            .withAgeAndGender();

          if (detections) {
            captureAndSaveImage(video, canvas);
            
            const DetectionsArray = faceapi.resizeResults(detections, canvasSize);
            canvas
              .getContext("2d")
              .clearRect(0, 0, canvas.width, canvas.height);

            faceapi.draw.drawDetections(canvas, DetectionsArray);
            faceapi.draw.drawFaceLandmarks(canvas, DetectionsArray);
            faceapi.draw.drawFaceExpressions(canvas, DetectionsArray);

            if (Object.keys(DetectionsArray).length > 0) {
              var isHuman = DetectionsArray.detection._score;
              var gender = DetectionsArray.gender;
              var age = DetectionsArray.age;
              var interpolatedAge = interpolateAgePredictions(age);
              var expressions = DetectionsArray.expressions;
              var maxValue = Math.max(...Object.values(expressions));
              var emotion = Object.keys(expressions).filter(
                (item) => expressions[item] === maxValue
              );
              //Detections
              const properties = {
                'isHuman': isHuman,
                'gender': gender,
                'age': interpolatedAge,
                'mood': emotion[0],
              }
              cameraInstructions(DetectionsArray, properties);
            }
          }
        }, 500);
      });
      function interpolateAgePredictions(age) {
        predictedAges = [age].concat(predictedAges).slice(0, 30);
        return predictedAges.reduce((total, a) => total + a) / predictedAges.length;
      }

      function cameraInstructions(DetectionsArray, properties) {

        const faceDirection = checkFaceDirection(DetectionsArray);
        const blink = checkEyeBlinks(DetectionsArray);
        const mouthOpen = detectMouthOpening(DetectionsArray);

        if (properties.isHuman >= 0.85) {
          cameraDoneData['isHuman'] = properties.isHuman
        }
        if (properties.mood === 'happy') {
          cameraDoneData['smile'] = properties.mood
        }
        if (!isEmpty(properties.gender)) {
          cameraDoneData['gender'] = properties.gender
        }
        if (!isEmpty(properties.age)) {
          cameraDoneData['age'] = properties.age
        }
        if (faceDirection === 'left') {
          cameraDoneData['faceLeft'] = 'left'
        }
        if (faceDirection === 'right') {
          cameraDoneData['faceRight'] = 'right'
        }
        if (blink === 'blinked') {
          cameraDoneData['eyeBlink'] = 'blinked'
        }
        if (mouthOpen === 'opened') {
          cameraDoneData['mouthOpened'] = 'opened'
        }
        if (mouthOpen === 'closed') {
          cameraDoneData['mouthClosed'] = 'closed'
        }
        for (const key in cameraToDo) {
          if (cameraToDo.hasOwnProperty(key)) {
            if (isEmpty(cameraDoneData[key])) {
              //No instruction set yet. So vars tell the user to perform the current action
              $('#camerainstruct').html(cameraToDo[key]);
              if(soundCompleted === false){
                soundCompleted = true;
                var sound = new Howl({
                  src: [BASE + 'asset/audio/'+key+'.mp3'],
                  onend: function() {
                    soundCompleted = false;
                  }
                });
                sound.play();
              }
              return 'undefined'; //stop the loop
            }
          }
        }
        //Stop camera capture and submit the data
        if (submitting_progress === false) {
          submitting_progress = true;
          clearInterval(cameraCapture);
          const formData = new FormData();
          formData.append('object', JSON.stringify(cameraDoneData));
          const button = $('#video-container').html();
          formData.append('request', 'recognition');
          formData.append('image', capturedImage);
          formData.append('fingerprint', radar._Tracker().deviceFingerPrint);

          general.ajaxFormData('#video-container', 'POST', gim.processor, formData, '#video-container', button, function (data) {
            //Shift to second state
            $('.identityPage').html(data.inline);
            if (typeof data.isRecognition != 'undefined') {
              $('#instructParent').attr('class', 'alert alert-warning mt-5 animate__animated animate__bounceIn');
              general.filePond(gim.fileProcessor, '#fileponder', {
                labelIdle: 'Drag ID Card or <span class="filepond--label-action">Browse</span>',
              }, function (response) {
                //Final stage
                if (response.status === 200) {
                  //Load the last process
                  $('.identityPage').html(response.inline);
                  sigInstance.init(function (signature, label, signaturePad) {
                    if (typeof signature !== 'undefined') {
                      //Store signature image
                      const formData = new FormData();
                      formData.append('request', 'signature');
                      formData.append('signature', signature);
                      const time = radar._Storage().get('gimTimeSpent_' + response.id);
                      formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
                      formData.append('timeSpent', time);
                      const button = $(label).html();
                      general.ajaxFormData('.identityPage', 'POST', gim.processor, formData, label, button, function (data) {
                        signaturePad.clear();
                        $('.identityPage').html(data.inline);
                        //Congratulations
                        const canvas3Settings = {
                          target: document.getElementById('completeCanvas'),
                          max: 300,
                          props: ['square', 'triangle', 'line', 'rectangle'],
                          size: 1.3,
                          animate: true,
                          colors: [[165, 104, 246], [230, 61, 135], [0, 199, 228], [253, 214, 126]],
                          clock: 70,
                          rotate: true
                        };
                        const canvas3 = new ConfettiGenerator(canvas3Settings);
                        canvas3.render();
                      }, 'centerLoader');
                    } else{
                      gToast.error('Signature error.');
                    }
                  });
                } else {
                  gToast.error(response.error);
                }
              }, { 'fingerprint': radar._Tracker().deviceFingerPrint }, '#instruct');
            }
          }, 'centerLoader');
        }
      }

      function detectMouthOpening(faceLandmarks) {

        try {

          const topLip = faceLandmarks.landmarks.getJawOutline();
          const bottomLip = faceLandmarks.landmarks.getMouth();

          const topLipAvg = topLip.reduce((acc, point) => acc + point.y, 0) / topLip.length;
          const bottomLipAvg = bottomLip.reduce((acc, point) => acc + point.y, 0) / bottomLip.length;
          const mouthOpenness = bottomLipAvg - topLipAvg;

          const fullyOpenThreshold = 10;
          const fullyClosedThreshold = 2;

          if (mouthOpenness >= fullyOpenThreshold) {
            return "opened";
          } else if (mouthOpenness <= fullyClosedThreshold) {
            return "closed";
          } else {
            return "partial";
          }
        } catch (e) {
          gToast.error(e);
        }
      }

      function checkFaceDirection(faceLandmarks) {
        const leftEye = faceLandmarks.landmarks.getLeftEye();
        const rightEye = faceLandmarks.landmarks.getRightEye();
        const midPointX = (leftEye[0].x + rightEye[3].x) / 2;
        const faceBox = faceLandmarks.detection.box;
        const midPointXChange = Math.abs(midPointX - previousMidPointX);
        const movementThreshold = 60;
        if (midPointXChange > movementThreshold) {
          // Update the previous midpoint for the next comparison
          previousMidPointX = midPointX;
          return midPointX < faceBox.x + faceBox.width / 2
            ? "left"
            : "right";
        }
        return 'none';
      }

      function calculateEyeOpenness(eyeLandmarks) {
        const eyeHeight = eyeLandmarks[3].y - eyeLandmarks[1].y;
        const eyelidDistance = eyeLandmarks[5].y - eyeLandmarks[2].y;
        return eyelidDistance / eyeHeight;
      }

      function checkEyeBlinks(faceLandmarks) {
        const leftEye = faceLandmarks.landmarks.getLeftEye();
        const rightEye = faceLandmarks.landmarks.getRightEye();
        const leftEyeOpenness = calculateEyeOpenness(leftEye);
        const rightEyeOpenness = calculateEyeOpenness(rightEye);
        const dynamicThreshold = previousEyeOpenness * 0.8;

        if (previousEyeOpenness && leftEyeOpenness < dynamicThreshold && rightEyeOpenness < dynamicThreshold) {
          return "blinked";
        }
        previousEyeOpenness = leftEyeOpenness;
        return "No eye blink detected";
      }


      function captureAndSaveImage(video, canvas) {

        //Capture the current frame from the video stream
        if (submitted_image == false) {
          submitted_image = true;
          const context = canvas.getContext('2d');
          context.drawImage(video, 0, 0, canvas.width, canvas.height);
          //Cross check user image for fraud alert
          //Save Image
          capturedImage = canvas.toDataURL('image/png');
          clearInterval(cancelCapture);
        }
      }
    }
  }, 'themeLoader')
});




$(document).on("click", "#logout", function (e) {
  e.stopPropagation();
  e.preventDefault();
  const formData = new FormData();
  formData.append('request', 'logout');
  formData.append('fingerprint', radar._Tracker().deviceFingerPrint);
  const button = $('#logout').html();
  general.ajaxFormData('#logout', 'POST', gim.processor, formData, '#logout', button, function (data) {
    general.reload();
  });
});